#include <iostream>
#include <limits>
#include <vector>
#include <stack>

using namespace std;

#define V 5

string nodes[V] = {"Home", "Sardjito", "Mirota", "GSP", "MIPA"};

int minDistance(const double dist[], const bool sptSet[]) {
    double min_dist = numeric_limits<double>::max();
    int min_index = -1;

    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min_dist) {
            min_dist = dist[v];
            min_index = v;
        }
    }
    return min_index;
}


void printPath(int parent[], int dest) {
    stack<int> path;
    int current = dest;
    
    while (current != -1) {
        path.push(current);
        current = parent[current];
    }
    
    while (!path.empty()) {
        cout << nodes[path.top()];
        path.pop();
        if (!path.empty()) cout << " â†’ ";
    }
}


void dijkstra(const vector<vector<double>>& graph, int src, int dest) {
    double dist[V];   
    bool sptSet[V];     
    int parent[V];  

    for (int i = 0; i < V; i++) {
        dist[i] = numeric_limits<double>::max();
        sptSet[i] = false;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);

        sptSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] > 0 &&
                dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    cout << "Shortest path from Home to MIPA:" << endl;
    printPath(parent, dest);
    cout << endl;
    cout << "Total distance: " << dist[dest] << " km" << endl;
}

int main() {
    vector<vector<double>> graph = {
        {0, 10.5, 7.4, 8.4, 0},    
        {0, 0, 0, 0, 1.1},          
        {0, 0, 0, 0, 2.4},          
        {0, 0, 0, 0, 2.1},          
        {0, 0, 0, 0, 0}     
    };
    
    dijkstra(graph, 0, 4);
    
    return 0;
}
